#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PTL - Python Tools Library
简化的日常工具集合命令行版本
"""

import argparse
import hashlib
import base64
import urllib.parse
import datetime
import time
import sys
from typing import Optional


class HashTools:
    """哈希工具类"""
    
    @staticmethod
    def md5(text: str) -> str:
        """计算MD5哈希值"""
        return hashlib.md5(text.encode('utf-8')).hexdigest()
    
    @staticmethod
    def sha256(text: str) -> str:
        """计算SHA256哈希值"""
        return hashlib.sha256(text.encode('utf-8')).hexdigest()


class EncodingTools:
    """编码工具类"""
    
    @staticmethod
    def url_encode(text: str) -> str:
        """URL编码"""
        return urllib.parse.quote(text, safe='')
    
    @staticmethod
    def url_decode(text: str) -> str:
        """URL解码"""
        return urllib.parse.unquote(text)
    
    @staticmethod
    def base64_encode(text: str) -> str:
        """Base64编码"""
        return base64.b64encode(text.encode('utf-8')).decode('utf-8')
    
    @staticmethod
    def base64_decode(text: str) -> str:
        """Base64解码"""
        try:
            return base64.b64decode(text).decode('utf-8')
        except Exception as e:
            return f"解码失败: {str(e)}"


class TimeTools:
    """时间工具类"""
    
    @staticmethod
    def timestamp_to_datetime(timestamp: str) -> str:
        """时间戳转换为日期时间格式"""
        try:
            # 处理毫秒级时间戳
            if len(str(int(float(timestamp)))) > 10:
                timestamp = float(timestamp) / 1000
            dt = datetime.datetime.fromtimestamp(float(timestamp))
            return dt.strftime('%Y-%m-%d %H:%M:%S')
        except Exception as e:
            return f"转换失败: {str(e)}"
    
    @staticmethod
    def datetime_to_timestamp(datetime_str: str) -> str:
        """日期时间格式转换为时间戳"""
        try:
            formats = [
                '%Y-%m-%d %H:%M:%S',
                '%Y-%m-%d',
                '%Y/%m/%d %H:%M:%S',
                '%Y/%m/%d'
            ]
            
            for fmt in formats:
                try:
                    dt = datetime.datetime.strptime(datetime_str, fmt)
                    return str(int(dt.timestamp()))
                except ValueError:
                    continue
            
            return "不支持的日期格式"
        except Exception as e:
            return f"转换失败: {str(e)}"
    
    @staticmethod
    def current_timestamp() -> str:
        """获取当前时间戳"""
        return str(int(time.time()))
    
    @staticmethod
    def current_datetime() -> str:
        """获取当前日期时间"""
        return datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')


class PTLTool:
    """PTL工具主类"""
    
    def __init__(self):
        self.hash_tools = HashTools()
        self.encoding_tools = EncodingTools()
        self.time_tools = TimeTools()
        self.parser = self._create_parser()
    
    def _create_parser(self) -> argparse.ArgumentParser:
        """创建命令行参数解析器"""
        parser = argparse.ArgumentParser(
            prog='ptl',
            description='PTL - Python Tools Library 简化的日常工具集合',
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog=self._get_examples()
        )
        
        subparsers = parser.add_subparsers(dest='command', help='可用命令')
        
        # 哈希命令
        hash_parser = subparsers.add_parser('md5', help='计算MD5哈希值')
        hash_parser.add_argument('text', nargs='*', help='要计算哈希的文本')
        
        sha256_parser = subparsers.add_parser('sha256', help='计算SHA256哈希值')
        sha256_parser.add_argument('text', nargs='*', help='要计算哈希的文本')
        
        # 编码命令
        url_parser = subparsers.add_parser('url', help='URL编码')
        url_parser.add_argument('text', nargs='*', help='要编码的文本')
        
        unurl_parser = subparsers.add_parser('unurl', help='URL解码')
        unurl_parser.add_argument('text', nargs='*', help='要解码的文本')
        
        b64_parser = subparsers.add_parser('b64', help='Base64编码')
        b64_parser.add_argument('text', nargs='*', help='要编码的文本')
        
        unb64_parser = subparsers.add_parser('unb64', help='Base64解码')
        unb64_parser.add_argument('text', nargs='*', help='要解码的文本')
        
        # 时间命令
        ts2dt_parser = subparsers.add_parser('ts2dt', help='时间戳转日期时间')
        ts2dt_parser.add_argument('timestamp', nargs='*', help='时间戳')
        
        dt2ts_parser = subparsers.add_parser('dt2ts', help='日期时间转时间戳')
        dt2ts_parser.add_argument('datetime', nargs='*', help='日期时间字符串')
        
        subparsers.add_parser('now', help='获取当前时间戳')
        subparsers.add_parser('time', help='获取当前日期时间')
        
        return parser
    
    def _get_examples(self) -> str:
        """获取使用示例"""
        return """
示例:
  ptl md5 "hello world"
  ptl sha256 "hello world"
  ptl url "hello world 中文"
  ptl unurl "hello%20world"
  ptl b64 "hello world"
  ptl unb64 "aGVsbG8gd29ybGQ="
  ptl ts2dt 1640995200
  ptl dt2ts "2024-01-01 12:00:00"
  ptl now
  ptl time
        """
    
    def _join_args(self, args_list: list) -> str:
        """合并参数列表为字符串"""
        return ' '.join(args_list) if args_list else ''
    
    def run(self, args: Optional[list] = None) -> None:
        """运行PTL工具"""
        # 兼容旧的命令行格式
        if args is None:
            args = sys.argv[1:]
        
        # 处理旧格式的兼容性
        if args and args[0] in ['help', '-h', '--help']:
            self.parser.print_help()
            return
        
        try:
            parsed_args = self.parser.parse_args(args)
            
            if not parsed_args.command:
                self.parser.print_help()
                return
            
            # 执行相应的命令
            self._execute_command(parsed_args)
            
        except SystemExit as e:
            # argparse会在某些情况下调用sys.exit()
            if e.code != 0:
                raise
    
    def _execute_command(self, args) -> None:
        """执行具体的命令"""
        command = args.command
        
        try:
            if command == 'md5':
                text = self._join_args(args.text)
                if not text:
                    print("错误: md5命令需要输入文本")
                    return
                print(self.hash_tools.md5(text))
                
            elif command == 'sha256':
                text = self._join_args(args.text)
                if not text:
                    print("错误: sha256命令需要输入文本")
                    return
                print(self.hash_tools.sha256(text))
                
            elif command == 'url':
                text = self._join_args(args.text)
                if not text:
                    print("错误: url命令需要输入文本")
                    return
                print(self.encoding_tools.url_encode(text))
                
            elif command == 'unurl':
                text = self._join_args(args.text)
                if not text:
                    print("错误: unurl命令需要输入文本")
                    return
                print(self.encoding_tools.url_decode(text))
                
            elif command == 'b64':
                text = self._join_args(args.text)
                if not text:
                    print("错误: b64命令需要输入文本")
                    return
                print(self.encoding_tools.base64_encode(text))
                
            elif command == 'unb64':
                text = self._join_args(args.text)
                if not text:
                    print("错误: unb64命令需要输入文本")
                    return
                print(self.encoding_tools.base64_decode(text))
                
            elif command == 'ts2dt':
                timestamp = self._join_args(args.timestamp)
                if not timestamp:
                    print("错误: ts2dt命令需要输入时间戳")
                    return
                print(self.time_tools.timestamp_to_datetime(timestamp))
                
            elif command == 'dt2ts':
                datetime_str = self._join_args(args.datetime)
                if not datetime_str:
                    print("错误: dt2ts命令需要输入日期时间")
                    return
                print(self.time_tools.datetime_to_timestamp(datetime_str))
                
            elif command == 'now':
                print(self.time_tools.current_timestamp())
                
            elif command == 'time':
                print(self.time_tools.current_datetime())
                
        except Exception as e:
            print(f"执行命令时出错: {str(e)}")


def main():
    """主函数"""
    try:
        ptl = PTLTool()
        ptl.run()
    except KeyboardInterrupt:
        print("\n程序被用户中断")
        sys.exit(0)
    except Exception as e:
        print(f"程序出现错误: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()